error: expected `;`, found `}`
  --> src/engine/engine.rs:44:11
   |
44 |         })
   |           ^ help: add `;` here
45 |     }
   |     - unexpected token

error[E0432]: unresolved import `crate::result::Result`
 --> src/engine/engine.rs:3:5
  |
3 | use crate::result::Result;
  |     ^^^^^^^^^^^^^^^^^^^^^ no `Result` in `result`
  |
help: a similar name exists in the module
  |
3 | use crate::result::result;
  |                    ~~~~~~
help: consider importing one of these items instead
  |
3 | use clap::error::Result;
  |     ~~~~~~~~~~~~~~~~~~~
3 | use core::fmt::Result;
  |     ~~~~~~~~~~~~~~~~~
3 | use core::result::Result;
  |     ~~~~~~~~~~~~~~~~~~~~
3 | use crate::result::result::Result;
  |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    and 7 other candidates

error[E0425]: cannot find value `rule_type` in this scope
  --> src/engine/engine.rs:43:13
   |
23 |     rule_type: i32, // VALUE if there is no KReg and KDict
   |     -------------- a field by that name exists in `Self`
...
43 |             rule_type,
   |             ^^^^^^^^^

error[E0603]: struct import `Logger` is private
  --> src/engine/engine.rs:4:28
   |
4  | use crate::logger::logger::Logger;
   |                            ^^^^^^ private struct import
   |
note: the struct import `Logger` is defined here...
  --> src/logger/logger.rs:4:5
   |
4  | use crate::conf::conf::Logger; // Assuming conf module is in the crate
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the struct `Logger` which is defined here
  --> src/conf/conf.rs:16:1
   |
16 | common_struct_trait!(Logger, output: String, log_file_path: String, log_level: String);
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ consider importing it directly
   = note: this error originates in the macro `common_struct_trait` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused import: `crate::conf::conf::Filter`
 --> src/engine/engine.rs:9:5
  |
9 | use crate::conf::conf::Filter;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `crate::conf::conf::Detect`
  --> src/engine/engine.rs:10:5
   |
10 | use crate::conf::conf::Detect;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::conf::conf::Verify`
  --> src/engine/engine.rs:11:5
   |
11 | use crate::conf::conf::Verify;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `debug`, `error`, `info`, `trace`, `warn`
 --> src/logger/logger.rs:1:11
  |
1 | use log::{error, warn, info, debug, trace, LevelFilter};
  |           ^^^^^  ^^^^  ^^^^  ^^^^^  ^^^^^

warning: unused import: `std::collections::HashMap`
 --> src/result/result.rs:1:5
  |
1 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: the method `clone` exists for struct `Vec<Item>`, but its trait bounds were not satisfied
   --> src/engine/engine.rs:55:44
    |
55  |                 let rules = Arc::new(rules.clone());
    |                                            ^^^^^ method cannot be called on `Vec<Item>` due to unsatisfied trait bounds
    |
   ::: src/conf/conf.rs:11:1
    |
11  | common_struct_trait!(Item, id: u32, name: String, category: String, description: String, level: u32, detect: Detect, filter: Filter, verify: Verify);
    | ---------------------------------------------------------------------------------------------------------------------------------------------------- doesn't satisfy `conf::conf::Item: Clone`
    |
   ::: /Users/byc/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs:396:1
    |
396 | pub struct Vec<T, #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator = Global> {
    | ------------------------------------------------------------------------------------------------ doesn't satisfy `Vec<conf::conf::Item>: Clone`
    |
    = note: the following trait bounds were not satisfied:
            `conf::conf::Item: Clone`
            which is required by `Vec<conf::conf::Item>: Clone`
help: consider annotating `conf::conf::Item` with `#[derive(Clone)]`
   --> /Users/byc/Code/rdlp/src/macros.rs:8:9
    |
8   +         #[derive(Clone)]
9   |         pub struct $name {
    |

error[E0308]: mismatched types
  --> src/engine/engine.rs:33:24
   |
33 |                 return Err("Failed to get configuration");       
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Worker`, found `Result<_, &str>`
   |
   = note: expected struct `Worker`
                found enum `std::result::Result<_, &str>`

error[E0599]: no method named `clone` found for struct `conf::conf::Item` in the current scope
  --> src/engine/engine.rs:37:41
   |
37 |           let rule = conf.rules.item[0].clone();
   |                                         ^^^^^ method not found in `Item`
   |
  ::: src/conf/conf.rs:11:1
   |
11 | common_struct_trait!(Item, id: u32, name: String, category: String, description: String, level: u32, detect: Detect, filter: Filter, verify: Verify);
   | ---------------------------------------------------------------------------------------------------------------------------------------------------- method `clone` not found for this struct
   |
   = help: items from traits can only be used if the trait is implemented and in scope
   = note: the following trait defines an item `clone`, perhaps you need to implement it:
           candidate #1: `Clone`

error[E0308]: mismatched types
   --> src/engine/engine.rs:41:28
    |
41  |             conf: Arc::new(conf),
    |                   -------- ^^^^ expected `Conf`, found `Arc<Conf>`
    |                   |
    |                   arguments to this function are incorrect
    |
    = note: expected struct `Conf`
               found struct `Arc<Conf>`
note: associated function defined here
   --> /Users/byc/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/sync.rs:385:12
    |
385 |     pub fn new(data: T) -> Arc<T> {
    |            ^^^

error[E0308]: mismatched types
  --> src/engine/engine.rs:28:21
   |
28 |     pub fn new() -> Self {
   |            ---      ^^^^ expected `Worker`, found `()`
   |            |
   |            implicitly returns `()` as its body has no tail or `return` expression

Some errors have detailed explanations: E0308, E0425, E0432, E0599, E0603.
For more information about an error, try `rustc --explain E0308`.
warning: `rdlp` (bin "rdlp") generated 5 warnings
error: could not compile `rdlp` (bin "rdlp") due to 9 previous errors; 5 warnings emitted